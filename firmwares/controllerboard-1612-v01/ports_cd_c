/*
 *  This file is part of the HCAN tools suite.
 *
 *  HCAN is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU General Public License as published by the Free
 *  Software Foundation; either version 2 of the License, or (at your
 *  option) any later version.
 *
 *  HCAN is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 *  for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with HCAN; if not, write to the Free Software Foundation, Inc., 51
 *  Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
 *
 *  (c) 2014 by Christoph Delfs
 */

#include <ports.h>
#include <canix/syslog.h>
#include <hcan.h>

#include <canix/canix.h>
#include <canix/led.h>
#include <canix/tools.h>
#include <canix/rtc.h>
#include <hcan.h>
#include <hcan_multicast.h>

#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/eeprom.h>
#include <avr/wdt.h>

#include <tasterinput.h>
#include <darlingtonoutput.h>
#include "i2cmaster.h"

#define MCP23017_ADDR     0x40
#define MCP23017_IODIRA   0x00
#define MCP23017_GPPUA    0x0C
#define MCP23017_GPIOA    0x12

// private functions:
bool checkForExpanderBoard(int address);
void checkAndConfig(device_data_ports *p);
void mapPortToArrayIndexAndMask(int portNumber, int* index, uint8_t* mask);
uint8_t bitReverse(uint8_t input);
uint8_t compatInput(uint8_t);
uint8_t compatOutput(uint8_t);

volatile static uint8_t valuesOfPortsOnExpanderBoard[MAXIMUM_NUMBER_OF_EXPANDER_BOARDS*4];
volatile static uint8_t previousValuesOfPortsOnExpanderBoard[MAXIMUM_NUMBER_OF_EXPANDER_BOARDS*4];
static  uint8_t* expanderBoard;
static  uint8_t* expanderBoardAvailable;
static uint8_t portsBase;
static int address = 255;
static bool compatMode;

bool portsDeviceCreated;
bool expanderActive = false;

static uint8_t compatTable[] = {0,0,15,15}; // out,out,in,in (Expander 0 1 2 3) - verwendet Kompatibilit√§tsmodus (jedes Bit)



void ports_init(device_data_ports *p, eds_block_p it) {
  int i;

  // There can be only ONE ports Device:
  if (portsDeviceCreated == true) {
    canix_frame message;

    // send "additional ports device ignored":
    message.src = canix_selfaddr();
    message.dst = HCAN_MULTICAST_CONTROL;
    message.proto = HCAN_PROTO_SFP;
    message.data[0] = HCAN_SRV_HES;
    message.data[1] = HCAN_HES_ADDITIONAL_PORTS_DEVICE_IGNORED;
    message.size = 2;
    canix_frame_send(&message);
    return;
  }


  i2c_init();
  
  
  for (i=0;i<4*MAXIMUM_NUMBER_OF_EXPANDER_BOARDS;i++){
    valuesOfPortsOnExpanderBoard[i]         = 0;
    previousValuesOfPortsOnExpanderBoard[i] = 255;
  }
  
  portsBase = p->config.base;
  expanderBoardAvailable = &p->config.expander0;

  // Check for compatibility mode:
  if (portsBase == 128) {
    compatMode  = true;    
    expanderBoard = compatTable;
  }
  else {
    expanderBoard = &p->config.expander0;
    compatMode  = false;    
  }


  checkAndConfig(p);  
  portsDeviceCreated = true;
}

void ports_darlingtonoutput_init(void) {
  uint8_t base;


  base = portsBase;

  if ((base == PORTS_ORIGINAL_MAPPING) || (base == 128) ){
    darlingtonoutput_initOrig();
    return;
  }
  
  // Use IN0..7 as output:
  if ((base & 1) ^ 1) {
    if (expanderActive)  {
      DDRC |= 0xff-0x03;
      PORTC &= ~(0x03);
    }
    else {
      DDRC |= 0xff;
      PORTC = 0;
    }
  }

  base >>=1;
  // Use IN8..15 as output:
  if ((base & 1) ^ 1) {
	DDRA |= 0xff;
	PORTA = 0;
  }

#ifdef quark
  base >>=1;
  if ((base & 1) ^ 1) {
	DDRD |= 0xff;
	PORTD = 0;
  }

  base >>=1;
  if ((base & 1) ^ 1) {
	DDRB  |= 0x0f;
	PORTB &= ~(0x0f);
  }
#endif
}



uint8_t val = 0;
uint8_t myAddress;
uint8_t myBank;


////////////////////////////////////////////////////////////////////////
//
//
//
// Check whether boards are available and configure them
//
//
//
////////////////////////////////////////////////////////////////////////


// provides latest status on whether board is available:
bool resultArray[MAXIMUM_NUMBER_OF_EXPANDER_BOARDS];

void checkAndConfig(device_data_ports *p) {
  int i,j;
  expanderActive = false;
  int bank;

  // check there existance:
  for (i=0;i<MAXIMUM_NUMBER_OF_EXPANDER_BOARDS;i++) {

    // Check if declared:
    if (expanderBoardAvailable[i] != 255) {

      // Check whether both MCP chips do exist:
      resultArray[i]  = checkForExpanderBoard(4*i);// & checkForExpanderBoard(4*i+2));
      // If at least one expander board is connected, the expander device will use pins 0 and 1:
      if (resultArray[i] == true) {
	expanderActive = true;
      }

      // only, if a device is found, it gets configured:
      if (resultArray[i] == true) {
	  // Configure input according to configuration:
	  for (j=0;j<4;j++) {
	  address = (i*2 + 1-(j % 2))*2;
	  // select bank A or B:
	  bank    = 1-(j>1);
	  if ((expanderBoard[i] >> j)&1) {
	    // activate input:
	    i2c_start(MCP23017_ADDR+address+I2C_WRITE);
	    // select either IODIRA or IODIRB (via bank):
	    i2c_write(MCP23017_IODIRA + bank);
	    // if selected, the whole bank is set as input
	    i2c_write(0xff);
	    i2c_stop();

	    // activate pull-up for input ports:
	    i2c_start(MCP23017_ADDR+address+I2C_WRITE);
	    // select either GPPUA or GPPUB via bank:
	    i2c_write(MCP23017_GPPUA + bank);
	    // the whole bank gets pull-up:
	    i2c_write(0xff);
	    i2c_stop();
	  }	      
	  else {
	    // activate output:
	    i2c_start(MCP23017_ADDR+address+I2C_WRITE);
	    // select either IODIRA or IODIRB via bank:
	    i2c_write(MCP23017_IODIRA + bank);
	    // if selected, the set whole bank as output
	    i2c_write(0x0);
	    i2c_stop();
	  }
	}	      
      }	 
    }
  }
}

bool checkForExpanderBoard(int address)  {
    canix_frame message;

    // check for board and chip:
    if (!i2c_start(MCP23017_ADDR+address+I2C_WRITE)) {
      i2c_stop();
      return true;
    }

    // send "not found" message:
    message.src = canix_selfaddr();
    message.dst = HCAN_MULTICAST_CONTROL;
    message.proto = HCAN_PROTO_SFP;
    message.data[0] = HCAN_SRV_HES;
    message.data[1] = HCAN_HES_EXPANDER_NOT_FOUND;
    message.data[2] = address;
    message.size = 3;
    canix_frame_send(&message);

  
    return false;
}

////////////////////////////////////////////////////////////////////////////
//
//
// Read and write operators (all read operations read out pre-fetched data)
//
//
/////////////////////////////////////////////////////////////////////////////


bool ports_getInput(int portNumber) {
  int index,i,j;
  uint8_t mask,base;


  if (compatMode == true) {
    portNumber = compatInput(portNumber);
  }

  // Ports 0 and 1 are used, if the expander is active.
  if ((portNumber < 2) && (expanderActive == true))
    return 0;


  if (portNumber < 32) {
    base = portsBase;

    // Compatibility mode: use original handler
    if (base & 0x80) {
      return tasterport_readOrig(portNumber);
    }
    
    // 
    // Use original handler also for all ports < 16, if the port is configured as input
    // 
    if ((base & 1)&&(portNumber < 8)) {
      return tasterport_readOrig(portNumber);
    }
    
    base >>=1;
    if ((base & 1)&&(portNumber < 16)) {
      return tasterport_readOrig(portNumber);
    }

    //////////////
    
    base >>=1;
    portNumber -= 16;
    if ((base & 1)&&(portNumber < 8)) {
      portNumber =7 - portNumber;
      
      // set input mode
      DDRD &= ~ (1<< portNumber);
      
      // activate pull-up
      PORTD |= (1<< portNumber);
      
      return PIND & (1<< portNumber);
    }
    
    base >>=1;
    portNumber -= 8;
    if ((base & 1)&&(portNumber < 4)) {
      // mirror port pins:
      portNumber = 3 - portNumber;
      
      DDRB &= ~ (1<< portNumber);      
      PORTB |= (1<< portNumber);
      
      return PINB & (1<< portNumber);
    }

    // default: (27 < portNumber < 32)
    return 0;
  }

  // Expander handling:
  
  mapPortToArrayIndexAndMask(portNumber,&index,&mask);
  i = index / 4;
  j = index - i*4;

  // Is input?
  if ((expanderBoard[i] >> j)&1) {
    // yes:
    return (valuesOfPortsOnExpanderBoard[index] & mask ? 1:0);
  }

  // is output:
  return 0;
}

void ports_setOutput(int portNumber,bool state) {
  int index;
  uint8_t mask;
  int i,j;
  uint8_t base;

  // start of controller owned ports handling
  if (compatMode == true) {
    portNumber = compatOutput(portNumber);
  }

  if (portNumber < 32) {

    base = portsBase;

    if ((base==PORTS_ORIGINAL_MAPPING)||(compatMode == true)) {
      darlingtonoutput_setpinOrig(portNumber,state);
    }

    // No compatibility mode: then first 2 pins get ignored
    if ((portNumber < 2) && (expanderActive == true)) {
      return ;
    }

    // Use IN0..7 as output:
    if (((base & 1) ^ 1)&&(portNumber < 8)) {
      DDRC |= (1<< portNumber);
      
      if (state)
	PORTC |= (1<< portNumber);
      else
	PORTC &= ~ (1<< portNumber);
      return;
    }
    
    base >>=1;
    portNumber -=8;
    if (((base & 1) ^ 1)&&(portNumber < 8)) {
      portNumber = 7- portNumber;
      DDRA |= (1<< portNumber);
    
      if (state)
	PORTA |= (1<< portNumber);
      else
	PORTA &= ~ (1<< portNumber);
      return;
    }
    

    base >>=1;
    portNumber -=8;
    
    if (((base & 1) ^ 1)&&(portNumber < 8)) {
      darlingtonoutput_setpinOrig(7-portNumber,state);
      return;
    }

    base >>=1;
    portNumber -=8;
    if (((base & 1) ^ 1)&&(portNumber < 4)) {
      darlingtonoutput_setpinOrig(11-portNumber,state);
    }

    // return affects also ports addresses > 27 and <32
    return;
  }

  // end of controller owned ports handling

  // following code covers ports on expander boards:

  mapPortToArrayIndexAndMask(portNumber,&index,&mask);
  i = index / 4;
  j = index - i*4;

  // Check whether this is an input port:
  if ((expanderBoard[i] >> j)&1) {
    // quit if yes:
    return;
  }

  if (state>0) {
    valuesOfPortsOnExpanderBoard[index] |= mask;
  }
  else {
    valuesOfPortsOnExpanderBoard[index] &= ~mask;
  }
}


bool ports_getOutput(int portNumber) {
  int index,i,j;
  uint8_t mask,base;

  // start of controller owned ports handling
  if (compatMode == true) {
    portNumber = compatOutput(portNumber);
  }

  if (portNumber < 32) {

    if ((portNumber < 2) && (expanderActive == true))
      return 0;


    base = portsBase;

    if (base & 0x80) {
      return darlingtonoutput_getpinOrig(portNumber);
    }

    if (((base & 1) ^ 1)&&(portNumber < 8)) {
      return PORTC & (1<< portNumber);
    }
    
    base >>=1;
    portNumber -=8;
    if (((base & 1) ^ 1)&&(portNumber < 8)) {
      portNumber = 7-portNumber;
      return PORTA & (1<< portNumber);
    }
    

    base >>=1;
    portNumber -=8;
    if (((base & 1) ^ 1)&&(portNumber < 8)) {
      return darlingtonoutput_getpinOrig(7-portNumber);
    }

    base >>=1;
    portNumber -=8;
    if (((base & 1) ^ 1)&&(portNumber < 4)) {
      return darlingtonoutput_getpinOrig(11-portNumber);
    }

    // return affects also ports addresses > 27 and <32
    return 0 ;
  }
  // end of controller owned ports handling

  // following code covers ports on expander boards:

  mapPortToArrayIndexAndMask(portNumber,&index,&mask);

  i = index / 4;
  j = index - i*4;

  // Check whether this is an input port:
  if ((expanderBoard[i] >> j)&1) {
    // quit if yes:
    return 0;
  }

  return ((valuesOfPortsOnExpanderBoard[index] & mask) ? 1:0);
}

uint8_t bitReverse(uint8_t input) {
  uint8_t reverted = 0;
  int i;

  for (i = 0; i < 8; i++) {
    if (input & 1) {
      reverted |= 1 << (7-i);
    }
    input >>=1;
  }
  return reverted;
}

void mapPortToArrayIndexAndMask(int portNumber, int* index, uint8_t* mask) {
  uint8_t localPort;

  portNumber -= 32;
  localPort   = portNumber%32;
  *index      = portNumber/8;
  *mask       = (1 << (portNumber - (*index)*8));
  if (localPort > 15)
    *mask = bitReverse(*mask);
}

//////////////////////////////////////////////////////////////////
//
//
//  Read and Write operations to all boards and MCP chips
//
//
//////////////////////////////////////////////////////////////////

void handlerForExpanderUpdate(void) {
  int i,j;
  uint8_t bank;

  for (i=0;i<MAXIMUM_NUMBER_OF_EXPANDER_BOARDS;i++) {
    // Check if declared:
    if (resultArray[i]) {

	for (j=0;j<4;j++) {

	  //   i*2: MCP base address for the given board
	  //   j%2: select MCP on the board( either 0 or 1)
	  address = (i*2 + 1-(j % 2))*2;
	  // select bank A or B:
	  bank    = 1-(j>1);
	  
	  // Read operation:
	  if ((expanderBoard[i] >> j)&1) {

	    i2c_start(MCP23017_ADDR+address+ I2C_WRITE);
	    i2c_write(MCP23017_GPIOA+bank);
	    i2c_rep_start(MCP23017_ADDR+address + I2C_READ); 
	    valuesOfPortsOnExpanderBoard[4*i+j] = i2c_readNak();
	    i2c_stop();

	  }	      

	  // Write operation:
	  else  {
	    if (previousValuesOfPortsOnExpanderBoard[4*i+j] != valuesOfPortsOnExpanderBoard[4*i+j]) {
	      i2c_start(MCP23017_ADDR+address+ I2C_WRITE);
	      i2c_write(MCP23017_GPIOA+bank);
	      i2c_write(valuesOfPortsOnExpanderBoard[4*i+j]);
	      i2c_stop();

	      // copy current values to previous to detect changes:
	      previousValuesOfPortsOnExpanderBoard[4*i+j]   = valuesOfPortsOnExpanderBoard[4*i+j];
	      myAddress = address;
	      myBank = bank;
	    }
	  }
	}	      
    }	 
  }
}


// Compatibility functions to convert shiftio port-mapping to ports port-mapping.

uint8_t compatInput(uint8_t in) {
  uint8_t offset = 0;

  if (in < 16)
    return in;

  if (in > 47) {
    offset = 64;
  }
  //  143 = 47+64+32
  return (143-in+offset);


}
uint8_t compatOutput(uint8_t out) {
  uint8_t offset = 0;

  if (out < 12)
    return out;


  if (out > 43) {
    offset = 64;
  }
  // 75 = 43+32
  return (75-out+offset);

}
